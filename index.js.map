{"version":3,"file":"index.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["export const createGalleryCardTemplate = imgInfo => {\n\n  return `\n    <li class=\"gallery-card\">\n    <a class = \"js-gallery-link\" href = \"${imgInfo.largeImageURL}\"> <img class=\"gallery-img\" src=\"${imgInfo.webformatURL}\" alt=\"${imgInfo.tags}\"/></a>\n    <div class=\"stats-container\">\n        <ul class=\"stats-list\">\n            <li class=\"gallery-item\">\n                <span class=\"label\">Likes</span>\n                <span class=\"value\">${imgInfo.likes}</span>\n            </li>\n            <li class=\"gallery-item\">\n                <span class=\"label\">Views</span>\n                <span class=\"value\">${imgInfo.views}</span>\n            </li>\n            <li class=\"gallery-item\">\n                <span class=\"label\">Comments</span>\n                <span class=\"value\">${imgInfo.comments}</span>\n            </li>\n            <li class=\"gallery-item\">\n                <span class=\"label\">Downloads</span>\n                <span class=\"value\">${imgInfo.downloads}</span>\n            </li>\n        </ul>\n    </div>\n</li>`\n};","export const fetchPhotosByQuery = query => {\n\n    const fetchParams = new URLSearchParams(\n        {\n            key: '52947144-373b760a7dc07b63f24b6c37a',\n            q: query,\n            image_type: 'photo',\n            orientation: 'horizontal',\n            safesearch: true,\n        }\n    );\n    return  fetch(\n        `https://pixabay.com/api/?${fetchParams}`\n    )\n    .then (response => {\n        if (!response.ok) {\n            throw new Error(response.status);\n        }\n        return response.json();\n    })\n\n};","import iziToast from \"izitoast\";\n// Additional style import for iziToast. This ensures the necessary CSS is loaded for the notifications.\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport { createGalleryCardTemplate } from './js/render-functions'; // Function to create the HTML markup for a single gallery item.\nimport {fetchPhotosByQuery} from \"./js/pixabay-api\" // API call function to fetch images from Pixabay based on a search query.\n\n// SimpleLightbox library import (as described in documentation). Used for creating a modal/slideshow view of the images.\nimport SimpleLightbox from \"simplelightbox\";\n// Additional style import for SimpleLightbox. This ensures the necessary CSS is loaded for the lightbox component.\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n// Variable to hold the SimpleLightbox instance. Initialized to null.\nlet lightboxInstance = null;\n\n// LIGHTBOX INITIALIZATION/UPDATE FUNCTION\n// This function initializes the SimpleLightbox or refreshes it after new images are added to the DOM.\nconst initLightbox = () => {\n    // If the instance hasn't been created yet (first time loading gallery), create it.\n    if (!lightboxInstance) {\n        lightboxInstance = new SimpleLightbox('.js-gallery a', {\n            // Target all <a> tags within the gallery container (.js-gallery) for the lightbox functionality.\n            captionDelay: 250, // Delay in milliseconds before the caption appears.\n            captionsData: 'alt', // Specify to use the 'alt' attribute of the image for the caption text.\n        });\n    } else {\n        // If the instance already exists, refresh it to include any newly added images in the gallery.\n        lightboxInstance.refresh();\n    }\n}\n\n\n// Form elements references. Grouping DOM elements here makes them easy to access and manage.\nconst refs = {\n    searchForm: document.querySelector('.js-search-form'), // Reference to the main search form element.\n    gallery: document.querySelector('.js-gallery'), // Reference to the container where gallery cards are rendered.\n    loader: document.querySelector('.js-loader'),\n}\n\n// Handler function executed when the search form is submitted.\nconst onSearchFormSubmit = event => {\n    event.preventDefault(); // Prevent the default form submission and page reload.\n\n    // Destructure the target element from the event object for easier access.\n    const {target : searchForm} = event;\n\n    // Get the value from the input field named 'user_query' and remove leading/trailing whitespace.\n    const searchedQuery = searchForm.elements.user_query.value.trim()\n    \n\n    // Validation: Check if the search query is empty.\n    if (searchedQuery.length === 0) {\n        \n            // Display an error notification using iziToast if the query is empty.\n            iziToast.show({\n            title: \"WARNING\",\n            message: `Search query cannot be empty!`,\n            color: 'red', // Set notification color to red for warnings/errors.\n            position: 'topCenter', // Position the notification at the top center of the screen.\n\n        });\n\n        return; // Stop the function execution if the query is empty.\n    }\n    // Clear the existing gallery content before fetching and displaying new results.\n    refs.gallery.innerHTML = '';\n\n    refs.loader.classList.add('is-active')\n    \n    // Call the API function to fetch photos based on the user's query.\n    fetchPhotosByQuery(searchedQuery)\n    .finally(() => {\n        refs.loader.classList.remove('is-active');\n    })\n    .then(data => {\n        console.log(data)\n        // Check if the API returned no results (hits array is empty).\n        if (data.hits.length === 0){\n            // Display a notification if no images were found for the query.\n            iziToast.show({\n    message: 'Sorry, there are no images matching your search query. Please try again!',\n    color: 'red', // Set notification color to red.\n    position: 'topCenter', // Position the notification.\n\n});\n    return // Stop execution if no hits are found.\n        }\n\n        // Map over the array of picture data (data.hits) and create an HTML card template for each.\n        // Then, join the array of HTML strings into a single string.\n        const galleryCardTemplate = data.hits.map(pictureInfo => createGalleryCardTemplate(pictureInfo)).join('')\n        \n        // Insert the generated HTML string of gallery cards into the gallery container.\n        refs.gallery.innerHTML = galleryCardTemplate\n        \n        // Initialize or refresh the SimpleLightbox to include the newly rendered images.\n        initLightbox();\n\n    })\n    // Handle any errors that occur during the fetch process (e.g., network error).\n    .catch(err => {\n        console.log(err);\n    });\n}\n\n// Attach the event listener to the search form to trigger the submission handler.\nrefs.searchForm.addEventListener('submit', onSearchFormSubmit)"],"names":["createGalleryCardTemplate","imgInfo","fetchPhotosByQuery","query","fetchParams","response","lightboxInstance","initLightbox","SimpleLightbox","refs","onSearchFormSubmit","event","searchForm","searchedQuery","iziToast","data","galleryCardTemplate","pictureInfo","err"],"mappings":"6vBAAO,MAAMA,EAA4BC,GAEhC;AAAA;AAAA,2CAEkCA,EAAQ,aAAa,oCAAoCA,EAAQ,YAAY,UAAUA,EAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,sCAKxGA,EAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,sCAIbA,EAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,sCAIbA,EAAQ,QAAQ;AAAA;AAAA;AAAA;AAAA,sCAIhBA,EAAQ,SAAS;AAAA;AAAA;AAAA;AAAA,OCrB1CC,EAAqBC,GAAS,CAEvC,MAAMC,EAAc,IAAI,gBACpB,CACI,IAAK,qCACL,EAAGD,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACf,CACT,EACI,OAAQ,MACJ,4BAA4BC,CAAW,EAC1C,EACA,KAAMC,GAAY,CACf,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEnC,OAAOA,EAAS,MACxB,CAAK,CAEL,ECTA,IAAIC,EAAmB,KAIvB,MAAMC,EAAe,IAAM,CAElBD,EAQDA,EAAiB,QAAO,EAPxBA,EAAmB,IAAIE,EAAe,gBAAiB,CAEnD,aAAc,IACd,aAAc,KAC1B,CAAS,CAKT,EAIMC,EAAO,CACT,WAAY,SAAS,cAAc,iBAAiB,EACpD,QAAS,SAAS,cAAc,aAAa,EAC7C,OAAQ,SAAS,cAAc,YAAY,CAC/C,EAGMC,EAAqBC,GAAS,CAChCA,EAAM,eAAc,EAGpB,KAAM,CAAC,OAASC,CAAU,EAAID,EAGxBE,EAAgBD,EAAW,SAAS,WAAW,MAAM,KAAM,EAIjE,GAAIC,EAAc,SAAW,EAAG,CAGxBC,EAAS,KAAK,CACd,MAAO,UACP,QAAS,gCACT,MAAO,MACP,SAAU,WAEtB,CAAS,EAED,MACH,CAEDL,EAAK,QAAQ,UAAY,GAEzBA,EAAK,OAAO,UAAU,IAAI,WAAW,EAGrCP,EAAmBW,CAAa,EAC/B,QAAQ,IAAM,CACXJ,EAAK,OAAO,UAAU,OAAO,WAAW,CAChD,CAAK,EACA,KAAKM,GAAQ,CAGV,GAFA,QAAQ,IAAIA,CAAI,EAEZA,EAAK,KAAK,SAAW,EAAE,CAEvBD,EAAS,KAAK,CACtB,QAAS,2EACT,MAAO,MACP,SAAU,WAEd,CAAC,EACG,MACK,CAID,MAAME,EAAsBD,EAAK,KAAK,IAAIE,GAAejB,EAA0BiB,CAAW,CAAC,EAAE,KAAK,EAAE,EAGxGR,EAAK,QAAQ,UAAYO,EAGzBT,GAER,CAAK,EAEA,MAAMW,GAAO,CACV,QAAQ,IAAIA,CAAG,CACvB,CAAK,CACL,EAGAT,EAAK,WAAW,iBAAiB,SAAUC,CAAkB"}